/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PreprocessedDataService } from "../preprocessedData.service";
import { PreprocessedDataCreateInput } from "./PreprocessedDataCreateInput";
import { PreprocessedData } from "./PreprocessedData";
import { PreprocessedDataFindManyArgs } from "./PreprocessedDataFindManyArgs";
import { PreprocessedDataWhereUniqueInput } from "./PreprocessedDataWhereUniqueInput";
import { PreprocessedDataUpdateInput } from "./PreprocessedDataUpdateInput";

export class PreprocessedDataControllerBase {
  constructor(protected readonly service: PreprocessedDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PreprocessedData })
  async createPreprocessedData(
    @common.Body() data: PreprocessedDataCreateInput
  ): Promise<PreprocessedData> {
    return await this.service.createPreprocessedData({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        processedFile: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PreprocessedData] })
  @ApiNestedQuery(PreprocessedDataFindManyArgs)
  async preprocessedDataItems(
    @common.Req() request: Request
  ): Promise<PreprocessedData[]> {
    const args = plainToClass(PreprocessedDataFindManyArgs, request.query);
    return this.service.preprocessedDataItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        processedFile: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PreprocessedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async preprocessedData(
    @common.Param() params: PreprocessedDataWhereUniqueInput
  ): Promise<PreprocessedData | null> {
    const result = await this.service.preprocessedData({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        processedFile: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PreprocessedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePreprocessedData(
    @common.Param() params: PreprocessedDataWhereUniqueInput,
    @common.Body() data: PreprocessedDataUpdateInput
  ): Promise<PreprocessedData | null> {
    try {
      return await this.service.updatePreprocessedData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          processedFile: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PreprocessedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePreprocessedData(
    @common.Param() params: PreprocessedDataWhereUniqueInput
  ): Promise<PreprocessedData | null> {
    try {
      return await this.service.deletePreprocessedData({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          processedFile: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
