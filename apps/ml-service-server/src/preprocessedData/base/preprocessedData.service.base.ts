/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PreprocessedData as PrismaPreprocessedData,
} from "@prisma/client";

export class PreprocessedDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PreprocessedDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.preprocessedData.count(args);
  }

  async preprocessedDataItems(
    args: Prisma.PreprocessedDataFindManyArgs
  ): Promise<PrismaPreprocessedData[]> {
    return this.prisma.preprocessedData.findMany(args);
  }
  async preprocessedData(
    args: Prisma.PreprocessedDataFindUniqueArgs
  ): Promise<PrismaPreprocessedData | null> {
    return this.prisma.preprocessedData.findUnique(args);
  }
  async createPreprocessedData(
    args: Prisma.PreprocessedDataCreateArgs
  ): Promise<PrismaPreprocessedData> {
    return this.prisma.preprocessedData.create(args);
  }
  async updatePreprocessedData(
    args: Prisma.PreprocessedDataUpdateArgs
  ): Promise<PrismaPreprocessedData> {
    return this.prisma.preprocessedData.update(args);
  }
  async deletePreprocessedData(
    args: Prisma.PreprocessedDataDeleteArgs
  ): Promise<PrismaPreprocessedData> {
    return this.prisma.preprocessedData.delete(args);
  }
}
